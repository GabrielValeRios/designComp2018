/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2017  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Intel and sold by Intel or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("seconds_d")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("seconds_d[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_d";
}

SIGNAL("seconds_d[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_d";
}

SIGNAL("seconds_d[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_d";
}

SIGNAL("seconds_d[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_d";
}

SIGNAL("seconds_u")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("seconds_u[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_u";
}

SIGNAL("seconds_u[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_u";
}

SIGNAL("seconds_u[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_u";
}

SIGNAL("seconds_u[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seconds_u";
}

SIGNAL("auxRegSaidaA")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("auxRegSaidaA[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "auxRegSaidaA";
}

SIGNAL("auxRegSaidaA[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "auxRegSaidaA";
}

SIGNAL("auxRegSaidaA[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "auxRegSaidaA";
}

SIGNAL("auxRegSaidaA[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "auxRegSaidaA";
}

TRANSITION_LIST("clk1")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 3.0;
			LEVEL 1 FOR 3.0;
			LEVEL 0 FOR 1.0;
		}
	}
}

TRANSITION_LIST("seconds_d[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("seconds_d[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("seconds_d[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("seconds_d[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("seconds_u[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 450.0;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 310.0;
		}
	}
}

TRANSITION_LIST("seconds_u[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 210.0;
			LEVEL 1 FOR 240.0;
			LEVEL 0 FOR 420.0;
			LEVEL 1 FOR 130.0;
		}
	}
}

TRANSITION_LIST("seconds_u[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 90.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 120.0;
			LEVEL 1 FOR 10.0;
		}
	}
}

TRANSITION_LIST("seconds_u[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 30.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 120.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 60.0;
			LEVEL 1 FOR 60.0;
			LEVEL 0 FOR 10.0;
		}
	}
}

TRANSITION_LIST("auxRegSaidaA[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("auxRegSaidaA[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("auxRegSaidaA[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("auxRegSaidaA[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_d";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_d[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_d[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_d[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_d[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_u";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 0;
	CHILDREN = 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_u[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_u[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_u[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "seconds_u[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 6;
}

DISPLAY_LINE
{
	CHANNEL = "auxRegSaidaA";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15;
}

DISPLAY_LINE
{
	CHANNEL = "auxRegSaidaA[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "auxRegSaidaA[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "auxRegSaidaA[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "auxRegSaidaA[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
