// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/01/2018 18:33:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          letras
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module letras_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BIT3;
reg BIT4;
reg BIT5;
reg BIT6;
reg CLK;
reg Entrada;
// wires                                               
wire OUT0;
wire OUT1;
wire OUT2;
wire OUT3;
wire OUT4;
wire OUT5;
wire OUT6;

// assign statements (if any)                          
letras i1 (
// port map - connection between master ports and signals/registers   
	.BIT3(BIT3),
	.BIT4(BIT4),
	.BIT5(BIT5),
	.BIT6(BIT6),
	.CLK(CLK),
	.Entrada(Entrada),
	.OUT0(OUT0),
	.OUT1(OUT1),
	.OUT2(OUT2),
	.OUT3(OUT3),
	.OUT4(OUT4),
	.OUT5(OUT5),
	.OUT6(OUT6)
);
initial 
begin 
#1000000 $finish;
end 

// BIT6
initial
begin
	BIT6 = 1'b1;
end 

// BIT5
initial
begin
	BIT5 = 1'b0;
end 

// BIT4
initial
begin
	BIT4 = 1'b0;
end 

// BIT3
initial
begin
	BIT3 = 1'b0;
end 

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #40000 1'b1;
		# 40000;
	end
	CLK = 1'b0;
end 

// Entrada
initial
begin
	Entrada = 1'b0;
	Entrada = #170000 1'b1;
	Entrada = #50000 1'b0;
	Entrada = #110000 1'b1;
	Entrada = #40000 1'b0;
	Entrada = #120000 1'b1;
	Entrada = #60000 1'b0;
end 
endmodule

